package main

import (
	"fmt"
	"net/http"
	"time"

	"github.com/rokmetro/logging-library/errors"
	"github.com/rokmetro/logging-library/logs"
	"github.com/rokmetro/logging-library/logutils"
)

type handlerFunc = func(*logs.Log, http.ResponseWriter, *http.Request)

type WebAdapter struct {
	logsger *logs.Logger
}

func (we WebAdapter) Start() {
	// Empty permissions indicates that no permissions are required
	http.HandleFunc("/test", we.wrapFunc(we.test))

	http.ListenAndServe(":5000", nil)
}

// test endpoint tests logsging
func (we WebAdapter) test(l *logs.Log, w http.ResponseWriter, req *http.Request) {
	param := req.URL.Query().Get("param")
	l.AddContext("param", param)

	err := checkParam(param)
	if err != nil {
		l.RequestErrorAction(w, logutils.ActionValidate, logutils.TypeQueryParam, nil, err, http.StatusBadRequest, false)
		return
	}

	l.Info("Success")

	l.RequestSuccess(w)
}

func checkParam(param string) error {
	if param == "test" {
		return nil
	}

	return errors.ErrorData(logutils.StatusInvalid, logutils.TypeArg, &logutils.FieldArgs{"param": param})
}

// wrapFunc provides a standard wrapper that performs request logsging
func (we WebAdapter) wrapFunc(handler handlerFunc) http.HandlerFunc {
	// Receive request with tokens generated by auth service
	return func(w http.ResponseWriter, req *http.Request) {
		logsObj := we.logsger.NewRequestLog(req)

		logsObj.RequestReceived()
		handler(logsObj, w, req)
		logsObj.RequestComplete()
	}
}

// NewWebAdapter creates new WebAdapter instance
func NewWebAdapter(logsger *logs.Logger) WebAdapter {
	return WebAdapter{logsger: logsger}
}

func main() {
	//Instantiate a logsger for each service
	var logsger = logs.NewLogger("health-service", nil)
	logsger.SetLevel(logs.Debug)

	var random = 1234
	logsger.Infof("Starting service: %d", random)
	logsger.InfoWithFields("ENV_VAR", logutils.Fields{"name": "test", "val": 123})

	go CallTest()

	// Instantiate and start a new WebAdapter
	adapter := NewWebAdapter(logsger)
	adapter.Start()
}

func CallTest() (*http.Response, error) {
	time.Sleep(2 * time.Second)

	req, err := http.NewRequest("GET", "http://127.0.0.1:5000/test", nil)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", "example_token")
	req.Header.Set("Header", "test")
	req.Header.Set("span-id", "4313")

	q := req.URL.Query()
	q.Add("param", "test2")
	req.URL.RawQuery = q.Encode()

	fmt.Println(req.URL.String())

	client := &http.Client{}
	return client.Do(req)
}
